(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{381:function(n,e,t){"use strict";t.r(e),e.default="# Apache ECharts 5.3.0 特性介绍\n\nApache ECharts 5.3.0 在动画表达力、渲染性能、服务端渲染上做了大幅度的增强，同时也新增了多坐标轴刻度自动对齐、tooltip 数值格式化、地图投影等社区中期盼已久的特性。\n\n## 关键帧动画\n\n在之前 ECharts 的动画集中在图形添加、更新以及移除的过渡动画上，过渡动画往往只有开始状态和结束状态。为了表达更复杂的动画效果，我们 5.3.0 中为[自定义系列](${optionPath}series-custom)和[图形组件](${optionPath}graphic)引入了全新的关键帧动画。\n\n下面是一个简单的通过关键帧动画实现的呼吸动画的效果。\n\n```js live {layout: 'lr', height:300}\noption = {\n  graphic: {\n    type: 'circle',\n    shape: { r: 100 },\n    left: 'center',\n    top: 'center',\n    keyframeAnimation: [\n      {\n        duration: 3000,\n        loop: true,\n        keyframes: [\n          {\n            percent: 0.5,\n            easing: 'sinusoidalInOut',\n            scaleX: 0.1,\n            scaleY: 0.1\n          },\n          {\n            percent: 1,\n            easing: 'sinusoidalInOut',\n            scaleX: 1,\n            scaleY: 1\n          }\n        ]\n      }\n    ]\n  }\n};\n```\n\n在关键帧动画中，你可以配置动画时长、缓动、是否循环、每个关键帧的位置、缓动以及图形属性等。而且每个图形可以同时设置多个不同配置的关键帧动画。灵活的配置让我们可以实现非常复杂的动画效果，下面列举几个可以应用关键帧动画的场景。\n\n### 自定义加载动画\n\nECharts 默认内置了一个加载动画，可以调用`showLoading`显示。开发者经常会提需求需要更多的加载动画效果。现在有了关键帧动画后，我们可以通过图形（[graphic](${optionPath}graphic)）组件配合关键帧动画实现任何想要的加载动画效果。\n\n比如文本描边动画：\n\n```js live {layout: 'lr', height:300}\noption = {\n  graphic: {\n    elements: [\n      {\n        type: 'text',\n        left: 'center',\n        top: 'center',\n        style: {\n          text: 'Apache ECharts',\n          fontSize: 40,\n          fontWeight: 'bold',\n          lineDash: [0, 200],\n          lineDashOffset: 0,\n          fill: 'transparent',\n          stroke: '#000',\n          lineWidth: 1\n        },\n        keyframeAnimation: {\n          duration: 3000,\n          loop: true,\n          keyframes: [\n            {\n              percent: 0.7,\n              style: {\n                fill: 'transparent',\n                lineDashOffset: 200,\n                lineDash: [200, 0]\n              }\n            },\n            {\n              // Stop for a while.\n              percent: 0.8,\n              style: {\n                fill: 'transparent'\n              }\n            },\n            {\n              percent: 1,\n              style: {\n                fill: 'black'\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n};\n```\n\n或者柱状图形状的加载动画：\n\n```js live {layout: 'lr', height:300}\nconst columns = [];\nfor (let i = 0; i < 7; i++) {\n  columns.push({\n    type: 'rect',\n    x: i * 20,\n    shape: {\n      x: 0,\n      y: -40,\n      width: 10,\n      height: 80\n    },\n    style: {\n      fill: '#5470c6'\n    },\n    keyframeAnimation: {\n      duration: 1000,\n      delay: i * 200,\n      loop: true,\n      keyframes: [\n        {\n          percent: 0.5,\n          scaleY: 0.1,\n          easing: 'cubicIn'\n        },\n        {\n          percent: 1,\n          scaleY: 1,\n          easing: 'cubicOut'\n        }\n      ]\n    }\n  });\n}\noption = {\n  graphic: {\n    elements: [\n      {\n        type: 'group',\n        left: 'center',\n        top: 'center',\n        children: columns\n      }\n    ]\n  }\n};\n```\n\n### 扩展更丰富的散点图动画特效\n\n带有特效动画的散点图一直以来是 ECharts 的特色功能。开发者可以使用 [effectScatter](${optionPath}series-effectScatter) 系列来实现带有涟漪特效的动态散点图，这种特效动画除了让作品更有趣，也起到了高亮提示用户的效果。跟加载动画一样，开发者也常常提出需要更多动画效果的需求。现在我们可以在自定义系列中通过使用关键帧动画来实现更复杂的特效。\n\n比如下面例子在 SVG 地图上给自定义系列绘制的图钉加上了跳动的动画效果，同时配上了涟漪动画。\n\n\x3c!-- <md-example src=\"geo-svg-custom-effect\" width=\"100%\" height=\"500\" /> --\x3e\n\n```js live {layout: 'lr', readOnly: true }\nfetch(\n  'https://echarts.apache.org/examples/data/asset/geo/Map_of_Iceland.svg'\n)\n  .then(response => response.text())\n  .then(svg => {\n    echarts.registerMap('iceland_svg', { svg: svg });\n    option = {\n      geo: {\n        map: 'iceland_svg',\n        left: 0,\n        right: 0\n      },\n      series: {\n        type: 'custom',\n        coordinateSystem: 'geo',\n        geoIndex: 0,\n        zlevel: 1,\n        data: [\n          [488, 459, 100],\n          [770, 757, 30],\n          [1180, 743, 80],\n          [894, 1188, 61],\n          [1372, 477, 70],\n          [1378, 935, 81]\n        ],\n        renderItem(params, api) {\n          const coord = api.coord([\n            api.value(0, params.dataIndex),\n            api.value(1, params.dataIndex)\n          ]);\n\n          const circles = [];\n          for (let i = 0; i < 5; i++) {\n            circles.push({\n              type: 'circle',\n              shape: {\n                cx: 0,\n                cy: 0,\n                r: 30\n              },\n              style: {\n                stroke: 'red',\n                fill: 'none',\n                lineWidth: 2\n              },\n              // Ripple animation\n              keyframeAnimation: {\n                duration: 4000,\n                loop: true,\n                delay: (-i / 4) * 4000,\n                keyframes: [\n                  {\n                    percent: 0,\n                    scaleX: 0,\n                    scaleY: 0,\n                    style: {\n                      opacity: 1\n                    }\n                  },\n                  {\n                    percent: 1,\n                    scaleX: 1,\n                    scaleY: 0.4,\n                    style: {\n                      opacity: 0\n                    }\n                  }\n                ]\n              }\n            });\n          }\n          return {\n            type: 'group',\n            x: coord[0],\n            y: coord[1],\n            children: [\n              ...circles,\n              {\n                type: 'path',\n                shape: {\n                  d:\n                    'M16 0c-5.523 0-10 4.477-10 10 0 10 10 22 10 22s10-12 10-22c0-5.523-4.477-10-10-10zM16 16c-3.314 0-6-2.686-6-6s2.686-6 6-6 6 2.686 6 6-2.686 6-6 6z',\n                  x: -10,\n                  y: -35,\n                  width: 20,\n                  height: 40\n                },\n                style: {\n                  fill: 'red'\n                },\n                // Jump animation.\n                keyframeAnimation: {\n                  duration: 1000,\n                  loop: true,\n                  delay: Math.random() * 1000,\n                  keyframes: [\n                    {\n                      y: -10,\n                      percent: 0.5,\n                      easing: 'cubicOut'\n                    },\n                    {\n                      y: 0,\n                      percent: 1,\n                      easing: 'bounceOut'\n                    }\n                  ]\n                }\n              }\n            ]\n          };\n        }\n      }\n    };\n\n    myChart.setOption(option);\n  });\n```\n\n\x3c!-- ### 在大屏图表上放入科技感的动画特效 --\x3e\n\n### 加载 Lottie 动画\n\n为了充分发掘出新的关键帧动画的能力，ECharts 团队的沈毅写了一个 [Lottie 动画的解析库](https://github.com/pissang/lottie-parser)，可以将 Lottie 动画文件解析成 ECharts 的图形格式进行渲染。结合 Lottie 的表达力我们可以进一步的在我们的项目中绘制出细腻的动画。\n\n## 图形组件过渡动画\n\n我们在 5.0 里为自定义系列中返回的图形提供了更灵活的过渡动画配置。可以通过`transition`, `enterFrom`, `leaveTo`三个配置项来配置每个图形哪些属性会拥有过渡动画，当图形创建和被移除的时候该执行怎么样的动画。例如：\n\n```js\nfunction renderItem() {\n  //...\n  return {\n    //...\n    x: 100,\n    // 'style', 'x', 'y' 会被动画\n    transition: ['style', 'x', 'y'],\n    enterFrom: {\n      style: {\n        // 淡入\n        opacity: 0\n      },\n      //从左侧飞入\n      x: 0\n    },\n    leaveTo: {\n      // 淡出\n      opacity: 0\n    },\n    // 向右侧飞出\n    x: 200\n  };\n}\n```\n\n在 5.3.0 中我们把这些过渡动画的配置扩展到了图形（graphic）组件中，并且做了更多的增强：\n\n如果你不想一一写出每个要动画的属性，现在你可以直接配置`transition: 'all'`为所有属性都加上动画过渡。\n\n与此同时我们还新增了`enterAnimation`、`updateAnimation`、`leaveAnimation`分别配置每个图形入场、更新、出场动画的时长（duration）、延迟（delay）和缓动（easing）。除此之外，渐变色现在也支持动画了。\n\n## 全新的 SVG 渲染器\n\n在 5.3.0 中我们重构了我们的 SVG 渲染器，新的 SVG 渲染器能够带来 2x ~ 10x 的性能提升，在某些特殊场景中甚至能有数十倍的提升。\n\n之前的 SVG 渲染器我们直接从渲染队列更新到 DOM。但是因为 zrender 的图形属性跟 DOM 并不是一一对应的，因此中间需要实现非常复杂的 Diff 逻辑，容易出错而且在某些场景下性能并不能做到最好。在这个版本我们重构成先全量渲染到 VDOM，然后再将 VDOM patch 到 DOM 完成渲染。全量渲染可以避免复杂的 Diff 逻辑带来的潜在 Bug。而 VDOM 和 DOM 的一一对应可以保证在 patch 的时候保证更新是最少的，从而带来巨大的性能提升。\n\n[这个例子](https://echarts.apache.org/examples/zh/editor.html?c=geo-svg-scatter-simple&renderer=svg) 可以给大家带来比较直观的性能提升的感受。新的版本在 SVG 模式下拖动的交互上比之前版本流畅非常多。\n\n|             5.2.2 (Before)             |            5.3.0 (After)             |\n| :------------------------------------: | :----------------------------------: |\n| ![before](images/5-3-0/svg-before.gif) | ![after](images/5-3-0/svg-after.gif) |\n\n除了性能的提升，我们还可以使用中间全量渲染得到的 VDom 做更多的事情，比如下面会介绍的服务端渲染。\n\n## 零依赖的服务端渲染\n\n在之前的版本 ECharts 也可以实现服务端的渲染，但是必须得依赖 [node-canvas](https://github.com/Automattic/node-canvas)，如果是使用 SVG 模式则需要依赖 [JSDOM](https://github.com/jsdom/jsdom) 来模拟 DOM 环境。这些依赖一是带来了额外的体积和使用要求，二是也会有更多的性能损耗。\n\n这次新的 SVG 渲染器可以让我们从中间的 VDOM 渲染得到字符串，带来了完全零依赖的服务端渲染，输出更精简并且带有 CSS 动画的 SVG 字符串。\n\n```ts\nconst echarts = require('echarts');\n\n// 在 SSR 模式下第一个参数不需要再传入 DOM 对象\nconst chart = echarts.init(null, null, {\n  renderer: 'svg', // 必须使用 SVG 模式\n  ssr: true, // 开启 SSR\n  width: 400, // 需要指明高和宽\n  height: 300\n});\n\n// 像正常使用一样 setOption\nchart.setOption({\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      data: [120, 200, 150, 80, 70, 110, 130],\n      type: 'bar'\n    }\n  ]\n});\n\n// 输出字符串\nconst svgStr = chart.renderToSVGString();\n```\n\n在此基础上，我们优化了输出的 SVG 字符串，使其在诸如 PowerPoint 等更多的平台上有更好的显示效果。\n\n## 自定义地图投影\n\n地图一直是 ECharts 中使用非常广泛的组件。一般地图组件会使用存储了经纬度的 GeoJSON 格式的数据。而 ECharts 则计算出合适的显示区域然后把经纬度线性映射到这个区域。这是一种最简单的地图投影方式。但是简单的线性投影并无法满足某些复杂的地图场景，例如使用 [Albers](https://en.wikipedia.org/wiki/Albers_projection) 投影解决线性投影中面积失真的问题，或者在世界地图中让太平洋显示在中间等等。\n\n因此在 5.3.0 里中我们引入了自定义的地图投影，可以通过`project`和`unproject`两个方法告诉 ECharts 如何投影坐标，以及如何根据投影后坐标计算经纬度。下面是简单的使用墨卡托投影的例子：\n\n```ts\nseries = {\n  type: 'map',\n  projection: {\n    project: point => [\n      (point[0] / 180) * Math.PI,\n      -Math.log(Math.tan((Math.PI / 2 + (point[1] / 180) * Math.PI) / 2))\n    ],\n    unproject: point => [\n      (point[0] * 180) / Math.PI,\n      ((2 * 180) / Math.PI) * Math.atan(Math.exp(point[1])) - 90\n    ]\n  }\n};\n```\n\n除了我们自己实现投影公式，我们也可以使用 [d3-geo](https://github.com/d3/d3-geo) 等第三方库提供的现成的投影实现：\n\n```ts\nconst projection = d3.geoConicEqualArea();\n// ...\nseries = {\n  type: 'map',\n  projection: {\n    project: point => projection(point),\n    unproject: point => projection.invert(point)\n  }\n};\n```\n\n配合在 5.2 里新增的全局过渡动画特性，我们可以实现不同投影效果之间的动画过渡：\n\n![地图投影动画](images/5-3-0/map-projection.gif)\n\n除了地图的投影之外，我们在这个版本对于地图还做了下面两个增强：\n\n- 对 GeoJSON 数据提供了`'LineString'`和`'MultiLineString'`的支持。\n- 将默认标签位置的计算从包围盒中心改为最大区域的重心坐标，计算结果更加准确。\n\n## 多坐标轴的刻度对齐\n\n多坐标轴的刻度对齐是社区中提了很久的一个需求，我们在网上也可以看到很多开发者写的如何在 ECharts 中实现坐标轴对齐的文章，通常都会比较麻烦而且会有比较多的局限性。\n\n在 5.3.0 中我们终于引入了数值轴坐标轴刻度对齐的功能。可以在需要对齐刻度的坐标轴中配置`alignTicks: true`。该坐标轴就会根据第一个坐标轴的刻度划分去调整自己的刻度，实现自动对齐。\n\n```js live { layout: 'bt' }\noption = {\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {},\n  xAxis: [\n    {\n      type: 'category',\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n      axisPointer: {\n        type: 'shadow'\n      }\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value',\n      name: 'Precipitation',\n      alignTicks: true,\n      axisLabel: {\n        formatter: '{value} ml'\n      }\n    },\n    {\n      type: 'value',\n      name: 'Temperature',\n      axisLabel: {\n        formatter: '{value} °C'\n      }\n    }\n  ],\n  series: [\n    {\n      name: 'Evaporation',\n      type: 'bar',\n      // prettier-ignore\n      data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3]\n    },\n    {\n      name: 'Precipitation',\n      type: 'bar',\n      // prettier-ignore\n      data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3]\n    },\n    {\n      name: 'Temperature',\n      type: 'line',\n      yAxisIndex: 1,\n      data: [2.0, 2.2, 3.3, 4.5, 6.3, 10.2, 20.3, 23.4, 23.0, 16.5, 12.0, 6.2]\n    }\n  ]\n};\n```\n\n## 支持高亮和选中状态的关闭\n\nECharts 中高亮状态可以在鼠标移到图形上的时候给用户提供反馈，但是在图表中有海量图形的时候，高亮的动画也可能带来交互上的性能问题。特别在 [tooltip](${optionPath}tooltip) 或者[图例组件](${optionPath}legend)联动触发的高亮会同时高亮多个图形。\n\n因此在这个版本中我们新增了`emphasis.disabled`配置项。如果不需要高亮的反馈，又对交互性能非常在意的话，可以通过这个配置项来关闭高亮状态。\n\n与此同时，对于选中状态，我们也新增了`select.disabled`。该配置项可以用于细粒度配置部分数据不可选。\n\n## 支持整个系列的选中\n\n在 5.3.0 中我们支持将`selectedMode`配置为`'series'`以实现系列所有数据的选中。\n\n## tooltip 中的数值格式化\n\ntooltip 可以在用户移到图形上的时候通过提示框显示更详细的相关信息，ECharts 也提供了`formatter`回调函数可以让开发者更灵活的自定义提示框的内容。\n\n但是我们发现大部分时候开发者只是需要格式化提示框中的数字部分，例如固定精度，加上`$`前缀等等，而之前为了格式化数字开发者只能通过`formatter`重写整个提示框的内容。特别是在 5.0 后 ECharts 的提示框结构更复杂，样式更美观了，重写变得成本很大而且很难达到默认的效果。\n\n因此在这个版本我们为 tooltip 新增了`valueFormatter`配置项用于数值部分的格式化。\n\n还是刚才那个坐标轴对齐的例子，我们可以为提示框中的数值部分加上 °C 和 ml 的后缀。\n\n```js live { layout: 'bt' }\noption = {\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {},\n  xAxis: [\n    {\n      type: 'category',\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n      axisPointer: {\n        type: 'shadow'\n      }\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value',\n      name: 'Precipitation',\n      alignTicks: true,\n      axisLabel: {\n        formatter: '{value} ml'\n      }\n    },\n    {\n      type: 'value',\n      name: 'Temperature',\n      axisLabel: {\n        formatter: '{value} °C'\n      }\n    }\n  ],\n  series: [\n    {\n      name: 'Evaporation',\n      type: 'bar',\n      tooltip: {\n        valueFormatter: value => value + ' ml'\n      },\n      // prettier-ignore\n      data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3]\n    },\n    {\n      name: 'Precipitation',\n      type: 'bar',\n      tooltip: {\n        valueFormatter: value => value + ' ml'\n      },\n      // prettier-ignore\n      data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3]\n    },\n    {\n      name: 'Temperature',\n      type: 'line',\n      yAxisIndex: 1,\n      tooltip: {\n        valueFormatter: value => value + ' °C'\n      },\n      data: [2.0, 2.2, 3.3, 4.5, 6.3, 10.2, 20.3, 23.4, 23.0, 16.5, 12.0, 6.2]\n    }\n  ]\n};\n```\n\n每个系列都可以根据自己的数值格式配置自己的`valueFormatter`。\n\n## 更灵活的扇区圆角\n\n在 5.0 中我们为扇区新增了圆角的配置，可以让饼图，旭日图变得更有趣。之前圆角的配置只支持内半径和外半径分开配置，这次我们更进一步，支持扇区的四个角都配置成不同的圆角大小，带来更灵活的呈现。\n\n```js live { layout: 'lr', height: 400 }\noption = {\n  tooltip: {\n    trigger: 'item'\n  },\n  legend: {\n    top: '5%',\n    left: 'center'\n  },\n  series: [\n    {\n      name: 'Access From',\n      type: 'pie',\n      radius: ['30%', '70%'],\n      roseType: 'angle',\n      itemStyle: {\n        borderRadius: [20, 5, 5, 10],\n        borderColor: '#fff',\n        borderWidth: 2\n      },\n      label: {\n        show: false\n      },\n      data: [\n        { value: 800, name: 'Search Engine' },\n        { value: 735, name: 'Direct' },\n        { value: 580, name: 'Email' },\n        { value: 484, name: 'Union Ads' },\n        { value: 400, name: 'Video Ads' }\n      ]\n    }\n  ]\n};\n```\n\n## 饼图的复杂标签优化\n\n饼图一直是 ECharts 中标签呈现最复杂的图表之一，我们从 5.0 开始就一直在饼图的标签布局、显示上做了很多的优化。\n\n这次我们针对使用了换行，背景色，富文本等格式比较复杂的饼图标签做了深度的优化。在宽度的自适应、超出容器、引导线的计算上比之前有了更好的效果：\n\n|                5.2.2 (Before)                 |                5.3.0 (After)                |\n| :-------------------------------------------: | :-----------------------------------------: |\n| ![before](images/5-3-0/pie-label-before.png)  | ![after](images/5-3-0/pie-label-after.png)  |\n| ![before](images/5-3-0/pie-label-before2.png) | ![after](images/5-3-0/pie-label-after2.png) |\n\n## 柱状图 large 模式优化\n\n在数据量很多（> 2k）的时候，我们支持柱状图通过开启 [large](${optionPath}series-bar.large) 模式来加速渲染，提升交互性能，但是之前 [large](${optionPath}series-bar.large) 模式下对柱状图布局比较简单，不支持多系列堆叠后的布局。在 5.3.0 中我们对 [large](${optionPath}series-bar.large) 模式的布局进行了优化，跟普通模式保持了一致性。我们可以在更多的场景中通过开启 [large](${optionPath}series-bar.large) 来优化柱状图的性能。\n\n除此之外，优化后的柱状图布局也修复了在对数轴这样的非线性轴上堆叠效果不正确的 bug。\n\n## 非兼容改动\n\n### registerMap 和 getMap 方法需要在引入地图组件后才能使用\n\n为了减少最小打包的体积，我们从核心模块中移除了地图数据管理的方法`getMap`和`registerMap`。\n\n如果你是[按需引入](https://echarts.apache.org/handbook/zh/basics/import/#%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5-echarts-%E5%9B%BE%E8%A1%A8%E5%92%8C%E7%BB%84%E4%BB%B6) ECharts 组件的话，需要保证先引入了`GeoComponent`或者`MapChart`之后，才能使用`registerMap`注册地图数据。\n\n```ts\nimport * as echarts from 'echarts/core';\nimport { MapChart } from 'echarts/charts';\n\necharts.use([MapChart]);\n\n// 必须在使用 use 方法注册了 MapChart 后才能使用 registerMap 注册地图\necharts.registerMap('world', worldJSON);\n```\n\n如果你是使用`import * as echarts from 'echarts'`全量引入，这次改动不会对你产生任何影响。\n\n### 折线图移除默认高亮加粗的效果\n\n我们在 5.0 里对折线图引入了默认高亮加粗的效果，但是社区反馈这个在很多场景效果并不好，所以在这个版本我们将这个效果从默认开启改为默认关闭，如果需要使用高亮加粗，则可以显式配置：\n\n```ts\nseries = {\n  type: 'line',\n  //...\n  emphasis: {\n    lineStyle: {\n      width: 'bolder'\n    }\n  }\n};\n```\n\n## 完整更新记录\n\n查看[版本更新](${mainSitePath}/changelog.html#v5-3-0)\n"}}]);