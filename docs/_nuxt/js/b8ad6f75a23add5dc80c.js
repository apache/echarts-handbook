(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{378:function(n,t,e){"use strict";e.r(t),t.default="# 在项目中引入 Apache ECharts\n\n假如你的开发环境使用了 `npm` 或者 `yarn` 等包管理工具，并且使用 `webpack` 等打包工具进行构建，本文将会介绍如何引入 Apache ECharts<sup>TM</sup> 并通过 tree-shaking 特性只打包需要的模块以减少包体积。\n\n## NPM 安装 ECharts\n\n你可以使用如下命令通过 npm 安装 ECharts\n\n```shell\nnpm install echarts --save\n```\n\n## 引入 ECharts\n\n```js\nimport * as echarts from 'echarts';\n\n// 基于准备好的dom，初始化echarts实例\nvar myChart = echarts.init(document.getElementById('main'));\n// 绘制图表\nmyChart.setOption({\n  title: {\n    text: 'ECharts 入门示例'\n  },\n  tooltip: {},\n  xAxis: {\n    data: ['衬衫', '羊毛衫', '雪纺衫', '裤子', '高跟鞋', '袜子']\n  },\n  yAxis: {},\n  series: [\n    {\n      name: '销量',\n      type: 'bar',\n      data: [5, 20, 36, 10, 10, 20]\n    }\n  ]\n});\n```\n\n## 按需引入 ECharts 图表和组件\n\n上面的代码会引入 ECharts 中所有的图表和组件，如果你不想引入所有组件，也可以使用 ECharts 提供的按需引入的接口来打包必须的组件。\n\n```js\n// 引入 echarts 核心模块，核心模块提供了 echarts 使用必须要的接口。\nimport * as echarts from 'echarts/core';\n// 引入柱状图图表，图表后缀都为 Chart\nimport { BarChart } from 'echarts/charts';\n// 引入标题，提示框，直角坐标系，数据集，内置数据转换器组件，组件后缀都为 Component\nimport {\n  TitleComponent,\n  TooltipComponent,\n  GridComponent,\n  DatasetComponent,\n  TransformComponent\n} from 'echarts/components';\n// 标签自动布局、全局过渡动画等特性\nimport { LabelLayout, UniversalTransition } from 'echarts/features';\n// 引入 Canvas 渲染器，注意引入 CanvasRenderer 或者 SVGRenderer 是必须的一步\nimport { CanvasRenderer } from 'echarts/renderers';\n\n// 注册必须的组件\necharts.use([\n  TitleComponent,\n  TooltipComponent,\n  GridComponent,\n  DatasetComponent,\n  TransformComponent,\n  BarChart,\n  LabelLayout,\n  UniversalTransition,\n  CanvasRenderer\n]);\n\n// 接下来的使用就跟之前一样，初始化图表，设置配置项\nvar myChart = echarts.init(document.getElementById('main'));\nmyChart.setOption({\n  // ...\n});\n```\n\n> 需要注意的是为了保证打包的体积是最小的，ECharts 按需引入的时候不再提供任何渲染器，所以需要选择引入 `CanvasRenderer` 或者 `SVGRenderer` 作为渲染器。这样的好处是假如你只需要使用 svg 渲染模式，打包的结果中就不会再包含无需使用的 `CanvasRenderer` 模块。\n\n我们在示例编辑页的“完整代码”标签提供了非常方便的生成按需引入代码的功能。这个功能会根据当前的配置项动态生成最小的按需引入的代码。你可以直接在你的项目中使用。\n\n> v5.5.0 版本开始使用 ESM 作为默认的模块规范，查看可能的 [Breaking Changes](https://github.com/apache/echarts/pull/19513#issuecomment-1916237700) 以及 [Pull Request](https://github.com/apache/echarts/pull/19513)。\n\n## 在 TypeScript 中按需引入\n\n对于使用了 TypeScript 来开发 ECharts 的开发者，我们提供了类型接口来组合出最小的 `EChartsOption` 类型。这个更严格的类型可以有效帮助你检查出是否少加载了组件或者图表。\n\n```ts\nimport * as echarts from 'echarts/core';\nimport {\n  BarChart,\n  LineChart\n} from 'echarts/charts';\nimport {\n  TitleComponent,\n  TooltipComponent,\n  GridComponent,\n  // 数据集组件\n  DatasetComponent,\n  // 内置数据转换器组件 (filter, sort)\n  TransformComponent\n} from 'echarts/components';\nimport { LabelLayout, UniversalTransition } from 'echarts/features';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport type {\n  // 系列类型的定义后缀都为 SeriesOption\n  BarSeriesOption,\n  LineSeriesOption\n} from 'echarts/charts';\nimport type {\n  // 组件类型的定义后缀都为 ComponentOption\n  TitleComponentOption,\n  TooltipComponentOption,\n  GridComponentOption,\n  DatasetComponentOption\n} from 'echarts/components';\nimport type {\n  ComposeOption,\n} from 'echarts/core';\n\n// 通过 ComposeOption 来组合出一个只有必须组件和图表的 Option 类型\ntype ECOption = ComposeOption<\n  | BarSeriesOption\n  | LineSeriesOption\n  | TitleComponentOption\n  | TooltipComponentOption\n  | GridComponentOption\n  | DatasetComponentOption\n>;\n\n// 注册必须的组件\necharts.use([\n  TitleComponent,\n  TooltipComponent,\n  GridComponent,\n  DatasetComponent,\n  TransformComponent,\n  BarChart,\n  LineChart,\n  LabelLayout,\n  UniversalTransition,\n  CanvasRenderer\n]);\n\nconst option: ECOption = {\n  // ...\n};\n```\n"}}]);